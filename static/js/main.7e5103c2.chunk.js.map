{"version":3,"sources":["MediaFrancais/data/countries.tsv","MediaFrancais/data/medias_francais_mock.tsv","MediaFrancais/data/relations_medias_francais.tsv","Utils/StringUtils.js","MediaFrancais/MediaFrancais.js","App.js","Test.js","serviceWorker.js","index.js"],"names":["module","exports","StringUtils","isNotEmpty","entity","MediaFrancais","props","width","height","scale","lastX","lastY","origin","x","y","viewBox","borderColor","mergeMorrocanSahara","g","jsonData","morocco","objects","countries","geometries","filter","d","id","morrocanSahara","toBeMerged","append","datum","merge","attr","calculatePath","initMarkersAndLinks","d3","remove","changeTheme","theme","setState","state","medias_francais","mediaFiltered","showMarkersOnFirstOrder","raise","createWorldMap","relations_medias_francais","gGlobal","drawMediaPosition","drawCnx","addZoom","drawMap","node","worldData","isMapLoaded","selectAll","data","enter","i","length","markers","media_francais_filtre","countryName","getCx","getCy","getChildCount","nom","getNodeColor","text","e","circleOnHover","country","c","name","coordinate","latitude","longitude","projection","media","childsCount","origine","relations","links","buildLinks","addLinks","forEach","link","createLinkObject","validateLink","push","value","getCoordinateByEntity","cible","lien","valeur","etat","linkOrigineCoordinate","linkCibleCoordinate","entityName","countryFromMedia","m","cx","drawLink","line","console","log","curve","context","custom","_context","point","this","_point","_line","lineTo","moveTo","x0","y0","x1","y1","k","Math","sqrt","Infinity","quadraticCurveTo","style","colorPath","lineFunction","svg","call","on","zoomed","transform","event","circleOnClick","bind","drawSvgWrapper","className","onChange","target","geoMercator","translate","precision","center","Component","App","readCountries","then","response","readMediaFile","medias_francais_mock","readRelationFile","relations_medias_francais_mock","updateCitiesFromCsvFile","file","map","row","formatRow","population","cities","updateConnections","connections","handleFiles","files","reader","FileReader","onload","alert","result","readAsText","onFileChange","readAsDataURL","warn","updateWordMap","require","feature","features","fetch","status","json","getCities","coordinates","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e5103c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/countries.9f4f5047.tsv\";","module.exports = __webpack_public_path__ + \"static/media/medias_francais_mock.6817a7ea.tsv\";","module.exports = __webpack_public_path__ + \"static/media/relations_medias_francais.d49ff9ff.tsv\";","export class StringUtils {\r\n  //verify string not empty\r\n  static isNotEmpty = entity => {\r\n    return entity != \"\" && entity != \"\" && entity != null;\r\n  };\r\n}\r\n","import * as d3 from \"d3\";\r\nimport React, { Component } from \"react\";\r\nimport { merge} from \"topojson-client\"\r\nimport {StringUtils} from \"../Utils/StringUtils.js\"\r\nimport \"./MediaFrancais.css\"\r\n\r\nexport default class MediaFrancais extends Component {\r\n                 //Constantes\r\n\r\n                 width = \"100%\";\r\n                 height = \"100%\";\r\n                 scale = 250;\r\n                 lastX = 0;\r\n                 lastY = 0;\r\n                 origin = {\r\n                   x: 55,\r\n                   y: -40\r\n                 };\r\n                 viewBox = \"0 0 800 450\";\r\n                 borderColor = \"red\";\r\n\r\n                 constructor(props) {\r\n                   super(props);\r\n                   this.state = {\r\n                     medias_francais: this.props.medias_francais,\r\n                     isMapLoaded: false\r\n                   };\r\n                   this.changeTheme = this.changeTheme.bind(this);\r\n                 }\r\n\r\n                 componentWillMount() {\r\n                   console.log(\"componentWillMount\");\r\n                   //Draw svg Wrapper\r\n                   var svg = this.drawSvgWrapper();\r\n                   var gGlobal = svg.append(\"g\").attr(\"id\", \"gWrapper\");\r\n                   //Draw Path from worldData\r\n                   var g = this.drawMap(gGlobal, this.props.worldData);\r\n                   //Merge morrocan sahara\r\n                   this.mergeMorrocanSahara(g);\r\n                 }\r\n\r\n                 mergeMorrocanSahara = (g) => {\r\n                   //merge Morocco\r\n                   var jsonData = this.props.jsonData;\r\n                   //Moroccan Sahara id = 732\r\n                   //Morocco id = 504\r\n                   var morocco = jsonData.objects.countries.geometries.filter(\r\n                     d => d.id == 504\r\n                   );\r\n                   var morrocanSahara = jsonData.objects.countries.geometries.filter(\r\n                     d => d.id == 732\r\n                   );\r\n                   var toBeMerged = [morocco[0], morrocanSahara[0]];\r\n                   //\r\n                   g.append(\"path\")\r\n                     .datum(merge(jsonData, toBeMerged))\r\n                     .attr(\"className\", \"country\")\r\n                     .attr(\"d\", d => this.calculatePath(d))\r\n                     .attr(\"stroke\", this.borderColor)\r\n                     .attr(\"stroke-width\", 0.05)\r\n                     .attr(\"fill\", \"rgba(44, 130, 201, 1)\");\r\n                 };\r\n                 componentDidMount() {\r\n                   console.log(\"call the componentDidMount\");\r\n                 }\r\n\r\n                 componentDidUpdate() {\r\n                   console.log(\"call didComponentUpdate\");\r\n                 }\r\n                 render() {\r\n                   this.initMarkersAndLinks();\r\n                   console.log(\"call MediaFrancais render\");\r\n                   const medias_francais = this.state.medias_francais;\r\n                   const {\r\n                     worldData,\r\n                     relations_medias_francais,\r\n                     countries\r\n                   } = this.props;\r\n                   if (worldData.length > 0) {\r\n                     this.createWorldMap(\r\n                       medias_francais,\r\n                       relations_medias_francais,\r\n                       countries\r\n                     );\r\n                     this.showMarkersOnFirstOrder();\r\n                   }\r\n                   return (\r\n                     <div className=\"dropdown\">\r\n                       <select\r\n                         id=\"mySelect\"\r\n                         className=\"dropbtn\"\r\n                         onChange={e => {\r\n                           this.changeTheme(e.target.value);\r\n                         }}\r\n                       >\r\n                         <option value=\"0\">All theme</option>\r\n                         <option value=\"1\">Theme 1</option>\r\n                         <option value=\"2\">Theme 2</option>\r\n                         <option value=\"3\">Theme 3</option>\r\n                         <option value=\"4\">Theme 4</option>\r\n                       </select>\r\n                     </div>\r\n                   );\r\n                 }\r\n\r\n                 initMarkersAndLinks = () => {\r\n                   d3.selectAll(\".markers\").remove();\r\n                   d3.selectAll(\".paths\").remove();\r\n                 };\r\n                 changeTheme = theme => {\r\n                   if (theme == 0) {\r\n                     this.setState({\r\n                       ...this.state,\r\n                       medias_francais: this.props.medias_francais\r\n                     });\r\n                   } else {\r\n                     var mediaFiltered = this.props.medias_francais.filter(\r\n                       d => d.theme == theme\r\n                     );\r\n                     this.setState({\r\n                       ...this.state,\r\n                       medias_francais: mediaFiltered\r\n                     });\r\n                   }\r\n                 };\r\n\r\n                 showMarkersOnFirstOrder = () => {\r\n                   d3.select(\".markers\").raise();\r\n                 };\r\n                 //Create the world map\r\n                 createWorldMap = (\r\n                   medias_francais,\r\n                   relations_medias_francais,\r\n                   countries\r\n                 ) => {\r\n                   var gGlobal = d3.select(\"#gWrapper\");\r\n                   //Draw Medias\r\n                   this.drawMediaPosition(gGlobal, medias_francais);\r\n                   //Draw connexions\r\n                   this.drawCnx(\r\n                     gGlobal,\r\n                     relations_medias_francais,\r\n                     medias_francais,\r\n                     countries\r\n                   );\r\n                   //add zoom\r\n                   this.addZoom(gGlobal);\r\n                 };\r\n\r\n                 //Draw svg wrapper for map\r\n                 drawSvgWrapper() {\r\n                   //Construct Body\r\n                   var body = d3.select(\"body\");\r\n                   var divGlobal = body\r\n                     .append(\"div\")\r\n                     .attr(\"id\", \"map\")\r\n                     .attr(\"style\", \"border-style:dashed\");\r\n                   //Construct SVG\r\n                   var svg = divGlobal\r\n                     .append(\"svg\")\r\n                     .attr(\"id\", \"content\")\r\n                     .attr(\"width\", this.width)\r\n                     .attr(\"height\", this.height)\r\n                     .attr(\"viewBox\", this.viewBox)\r\n                     .attr(\r\n                       \"transform\",\r\n                       \"translate(\" +\r\n                         this.width / 2 +\r\n                         \",\" +\r\n                         this.height / 2 +\r\n                         \")\"\r\n                     );\r\n                   //Draw G for map\r\n                   return svg;\r\n                 }\r\n\r\n                 //Draw the world Map\r\n                 drawMap = (node, worldData) => {\r\n                   if (!this.state.isMapLoaded) {\r\n                     var g = node\r\n                       .append(\"g\")\r\n                       .attr(\"id\", \"worldMap\")\r\n                       .attr(\"className\", \"countries\");\r\n                     g.selectAll(\"path\")\r\n                       .data(worldData)\r\n                       .enter()\r\n                       .append(\"path\")\r\n                       .attr(\"key\", i => `path-${i}`)\r\n                       .attr(\"d\", d => this.calculatePath(d))\r\n                       .attr(\"className\", \"country\")\r\n                       //.attr(\"fill\", (d, i) => this.color(worldData, d, i))\r\n                       .attr(\r\n                         \"fill\",\r\n                         (d, i) =>\r\n                           `rgba(38,50,56,${(1 / worldData.length) * i})`\r\n                       )\r\n                       .attr(\"stroke\", this.borderColor)\r\n                       .attr(\"stroke-width\", 0.05);\r\n                     return g;\r\n                   }\r\n                 };\r\n\r\n                 //Add Markers Function\r\n                 drawMediaPosition = (node, medias_francais) => {\r\n                   const { relations_medias_francais, countries } = this.props;\r\n                   var markers = node.append(\"g\").attr(\"class\", \"markers\");\r\n                   var media_francais_filtre = medias_francais.filter(d =>\r\n                    StringUtils.isNotEmpty(d.countryName)\r\n                   );\r\n                   markers\r\n                     .selectAll(\"circle\")\r\n                     .data(media_francais_filtre)\r\n                     .enter()\r\n                     .append(\"circle\")\r\n                     .attr(\"key\", d => `marker-${d.id}`)\r\n                     .attr(\"cx\", d => {\r\n                       return this.getCx(d, countries);\r\n                     })\r\n                     .attr(\"cy\", d => {\r\n                       return this.getCy(d, countries);\r\n                     })\r\n                     .attr(\"r\", d => {\r\n                       return (\r\n                         1.5 *\r\n                         this.getChildCount(d.nom, relations_medias_francais)\r\n                       );\r\n                     })\r\n                     .attr(\"fill\", d => {\r\n                       return this.getNodeColor(\r\n                         d.id,\r\n                         relations_medias_francais\r\n                       );\r\n                     })\r\n                     .attr(\"stroke\", \"#FFFFFF\")\r\n                     .attr(\"class\", \"marker\")\r\n                     .append(\"title\")\r\n                     .text(e => this.circleOnHover(e));\r\n\r\n                   return markers;\r\n                 };\r\n\r\n                 getCx = (d, countries) => {\r\n                   var country = countries.filter(\r\n                     c => c.name == d.countryName\r\n                   )[0];\r\n                   if (StringUtils.isNotEmpty(country)) {\r\n                     var y = country.latitude;\r\n                     var x = country.longitude;\r\n                     var coordinate = [y, x];\r\n                     return this.projection()(coordinate)[0];\r\n                   }\r\n                 };\r\n\r\n                 getCy = (d, countries) => {\r\n                   var country = countries.filter(\r\n                     c => c.name == d.countryName\r\n                   )[0];\r\n                   if (StringUtils.isNotEmpty(country)) {\r\n                     var x = country.latitude;\r\n                     var y = country.longitude;\r\n                     var coordinate = [x, y];\r\n                     return this.projection()(coordinate)[1];\r\n                   }\r\n                 };\r\n                 //get node color\r\n                 getNodeColor = (id, media) => {\r\n                   var childsCount = media.filter(d => d.id === id).length;\r\n                   if (childsCount == 0) {\r\n                     return \"rgba(65, 131, 215, 1)\";\r\n                   } else {\r\n                     return \"rgba(214, 69, 65, 1)\";\r\n                   }\r\n                 };\r\n\r\n                 //get child\r\n                 getChildCount = (nom, media) => {\r\n                   var childsCount = media.filter(d => d.origine == nom).length;\r\n                   if (childsCount === 0) {\r\n                     return 1;\r\n                   }\r\n                   return childsCount;\r\n                 };\r\n\r\n                 drawCnx = (g, relations, media, countries) => {\r\n                   //build links\r\n\r\n                   var links = this.buildLinks(relations, media, countries);\r\n                   this.addLinks(g, links);\r\n                 };\r\n\r\n                 //build links\r\n                 buildLinks = (relations, media, countries) => {\r\n                   var links = [];\r\n                   relations.forEach((d, i) => {\r\n                     var link = this.createLinkObject(d, countries);\r\n                     //add new link object\r\n                     if (this.validateLink(link)) {\r\n                       links.push(link);\r\n                     }\r\n                   });\r\n                   return links;\r\n                 };\r\n\r\n                 //create a link DTO\r\n                 createLinkObject = (d, countries) => {\r\n                   var link = {\r\n                     origine: {\r\n                       value: d.origine,\r\n                       coordinate: this.getCoordinateByEntity(\r\n                         countries,\r\n                         d.origine\r\n                       )\r\n                     },\r\n                     cible: {\r\n                       value: d.cible,\r\n                       coordinate: this.getCoordinateByEntity(\r\n                         countries,\r\n                         d.cible\r\n                       )\r\n                     },\r\n                     lien: d.valeur,\r\n                     etat: d.etat\r\n                   };\r\n                   return link;\r\n                 };\r\n                 validateLink = link => {\r\n                   var linkOrigineCoordinate = link.origine.coordinate;\r\n                   var linkCibleCoordinate = link.cible.coordinate;\r\n                   if (\r\n                     linkOrigineCoordinate != null &&\r\n                     linkOrigineCoordinate.x != \"\" &&\r\n                     linkOrigineCoordinate.y != \"\" &&\r\n                     linkCibleCoordinate != null &&\r\n                     linkCibleCoordinate.x != \"\" &&\r\n                     linkCibleCoordinate.y != \"\"\r\n                   ) {\r\n                     return true;\r\n                   }\r\n                   return false;\r\n                 };\r\n\r\n                 getCoordinateByEntity = (countries, entityName) => {\r\n                   //search for associated country name\r\n                   var country = null;\r\n                   var countryFromMedia = this.state.medias_francais.filter(\r\n                     m => m.nom == entityName\r\n                   )[0];\r\n\r\n                   if (StringUtils.isNotEmpty(countryFromMedia)) {\r\n                     country = countries.filter(\r\n                       d => d.name == countryFromMedia.countryName\r\n                     )[0];\r\n\r\n                     if (\r\n                       country != null &&\r\n                       StringUtils.isNotEmpty(country.longitude) &&\r\n                       StringUtils.isNotEmpty(country.latitude)\r\n                     ) {\r\n                       var cx = country.longitude;\r\n                       var cy = country.latitude;\r\n                       return [cy, cx];\r\n                     }\r\n                   }\r\n                 };\r\n\r\n                 //creation de connection entre deux pays\r\n                 addLinks = (node, links) => {\r\n                   this.drawLink(node, links);\r\n                 };\r\n\r\n                 //TODO\r\n                 drawLink = (node, links) => {\r\n                   //We use this function curve instead of LineString Object to draw direct line\r\n                   var curve = context => {\r\n                     var custom = d3.curveLinear(context);\r\n                     custom._context = context;\r\n                     custom.point = function(x, y) {\r\n                       var x = +x;\r\n                       var y = +y;\r\n                       switch (this._point) {\r\n                         case 0:\r\n                           this._point = 1;\r\n                           this._line\r\n                             ? this._context.lineTo(x, y)\r\n                             : this._context.moveTo(x, y);\r\n                           this.x0 = x;\r\n                           this.y0 = y;\r\n                           break;\r\n                         case 1:\r\n                           this._point = 2;\r\n                         default:\r\n                           var x1 = this.x0 * 0.5 + x * 0.5;\r\n                           var y1 = this.y0 * 0.5 + y * 0.5;\r\n                           var m = 1 / (y1 - y) / (x1 - x);\r\n                           var r = -100; // offset of mid point.\r\n                           var k = r / Math.sqrt(1 + m * m);\r\n                           if (m == Infinity) {\r\n                             y1 += r;\r\n                           } else {\r\n                             y1 += k;\r\n                             x1 += m * k;\r\n                           }\r\n                           this._context.quadraticCurveTo(x1, y1, x, y);\r\n                           this.x0 = x;\r\n                           this.y0 = y;\r\n                           break;\r\n                       }\r\n                     };\r\n                     return custom;\r\n                   };\r\n\r\n                   //Draw a line between two points\r\n                   var line = d3\r\n                     .line()\r\n                     .x(d => {\r\n                       console.log(\"dx\", d);\r\n                       return this.projection()([\r\n                         d.coordinate[0],\r\n                         d.coordinate[1]\r\n                       ])[0];\r\n                     })\r\n                     .y(d => {\r\n                       return this.projection()([\r\n                         d.coordinate[0],\r\n                         d.coordinate[1]\r\n                       ])[1];\r\n                     })\r\n                     .curve(curve);\r\n\r\n                   node\r\n                     .append(\"g\")\r\n                     .attr(\"class\", \"paths\")\r\n                     .selectAll(\"path\")\r\n                     .data(links)\r\n                     .enter()\r\n                     .append(\"path\")\r\n                     .style(\"stroke\", d => this.colorPath(d))\r\n                     .style(\"stroke-width\", 0.5)\r\n                     .style(\"fill\", \"none\")\r\n                     .datum(d => {\r\n                       return [d.origine, d.cible];\r\n                     })\r\n                     .attr(\"d\", line)\r\n                     .append(\"title\")\r\n                     .text(d => d.lien);\r\n                 };\r\n\r\n                 //Draw a line between two points\r\n                 lineFunction = d => {\r\n                   console.log(\"lineFunction visited\", d);\r\n                   d3.line()\r\n                     .x(d => {\r\n                       console.log(\"dx\", d);\r\n                       return this.projection()([\r\n                         d.coordinate[0],\r\n                         d.coordinate[1]\r\n                       ])[0];\r\n                     })\r\n                     .y(d => {\r\n                       return this.projection()([\r\n                         d.coordinate[0],\r\n                         d.coordinate[1]\r\n                       ])[1];\r\n                     });\r\n                   //.curve(this.curveFunction);\r\n                 };                \r\n\r\n                 colorPath = link => {\r\n                   switch (link.etat) {\r\n                     case \"P\":\r\n                       //Orange\r\n                       return \"rgba(242, 120, 75, 1)\";\r\n                     case \"N\":\r\n                       return \"rgba(231, 76, 60, 1)\";\r\n                     default:\r\n                       return \"rgba(65, 131, 215, 1)\";\r\n                   }\r\n                 };\r\n                 //Add zoom\r\n                 addZoom = svg => {\r\n                   svg.call(d3.zoom().on(\"zoom\", () => this.zoomed(svg)));\r\n                 };\r\n\r\n                 zoomed = svg => {\r\n                   var transform = d3.event.transform;\r\n\r\n                   svg.attr(\"transform\", transform);\r\n                 };\r\n\r\n                 //Events handlers\r\n                 circleOnHover = event => {\r\n                   return (\r\n                     \"entity : \" +\r\n                     event.nom +\r\n                     \"country name : \" +\r\n                     event.countryName +\r\n                     \" [\" +\r\n                     event.x +\r\n                     \",\" +\r\n                     event.y +\r\n                     \"]\"\r\n                   );\r\n                 };\r\n\r\n                 circleOnClick = event => {\r\n                   console.log(\"event\", event);\r\n                 };\r\n\r\n                 //Projection and path calculator\r\n                 projection() {\r\n                   var geoMercator = d3\r\n                     .geoMercator()\r\n                     .scale(100)\r\n                     .translate([800 / 2, 450 / 2]);\r\n\r\n                   var projection2 = d3\r\n                     .geoOrthographic()\r\n                     .scale(300)\r\n                     .precision(0.1);\r\n                   var projection3 = d3\r\n                     .geoConicEqualArea()\r\n                     .scale(150)\r\n                     .center([0, 33])\r\n                     //.translate([width / 2, height / 2])\r\n                     .precision(0.3);\r\n                   return geoMercator;\r\n                 }\r\n\r\n                 calculatePath = d => {\r\n                   return d3.geoPath().projection(this.projection())(d);\r\n                 };\r\n\r\n               }\r\n","import React, { Component } from \"react\";\nimport { feature } from \"topojson-client\"\nimport * as d3 from \"d3\";\nimport countries from \"./MediaFrancais/data/countries.tsv\";\nimport medias_francais_mock from \"./MediaFrancais/data/medias_francais_mock.tsv\";\nimport relations_medias_francais_mock from \"./MediaFrancais/data/relations_medias_francais.tsv\";\nimport MediaFrancais from \"./MediaFrancais/MediaFrancais\";\nimport Test from \"./Test\";\n\n\nexport default class App extends Component {\n  \n                 constructor(props) {\n                   super(props);\n                   this.state = {\n                     //media file\n                     medias_francais : [],\n                     //relation media\n                     relations_medias_francais : [],\n                     //Data for map creations\n                     worldData: [],\n                     jsonData :[],\n                     //Data for cities with most populations\n                     cities: [],\n                     //Link between cities\n                     connections : []\n                   };\n                 }\n\n                 componentDidMount() {                   \n                   this.readMediaFile();\n                   this.readRelationFile();\n                   this.readCountries();\n                   //this.updateWordMapJson(); \n                   //Comment      \n                  this.updateWordMap();\n                  //this.updateCitiesFromCsvFile(capitalsPopulation);\n                  //this.updateConnections(connections);\n                }\n\n                 render() {\n                  const {worldData,jsonData,medias_francais,relations_medias_francais,countries} = this.state;\n                  if(worldData.length !=0 && medias_francais.length !=0){\n                  return (\n                    <div>\n                    <div>\n                      {/*<Test></Test>*/}\n                    </div>\n                    <div>\n                      <MediaFrancais \n                          worldData = {worldData} \n                          medias_francais = {medias_francais} \n                          relations_medias_francais = {relations_medias_francais}\n                          jsonData={jsonData}\n                          countries={countries}\n                    ></MediaFrancais>\n                    </div>\n                    </div>\n                  )}\n                  return (\n                    <div>\n                    </div>\n                  )\n                  \n                }\n                changeTheme = (theme)=>{\n                  var mediaFiltered = this.state.medias_francais.filter((d)=>d.theme==theme);\n                  console.log(\"mediaFiltered\",mediaFiltered);\n                  this.setState({\n                    medias_francais : mediaFiltered,\n                  })\n                  console.log(\"this.state.medias_francais\",this.state.medias_francais);\n                 }\n\n                 readCountries = ()=>{  \n                  d3.tsv(countries).then(response =>{\n                    console.log(\"countries response\",response);\n                    this.setState({\n                      countries : response\n                    }\n                    )\n                  });\n                 }\n\n                readMediaFile = () =>{\n                 \n                  d3.tsv(medias_francais_mock).then(response =>{\n                    this.setState({\n                      medias_francais : response\n                    }\n                    )\n                  });\n                }\n\n                readRelationFile = () =>{\n                 \n                  d3.tsv(relations_medias_francais_mock).then(response =>{\n                    this.setState({\n                      relations_medias_francais : response\n                    })\n                  });\n                }\n\n\n                 updateCitiesFromCsvFile = file => {\n                   d3.csv(file).then(data => {\n                     data.map((row,i) => {\n                      this.formatRow(row);\n                       var coordinate = [row.x, row.y];\n                       data[i] = [row.name, coordinate, row.population];\n                     });\n                     this.setState({\n                       cities: data\n                     });\n                   });\n                 };\n\n                 updateConnections = file => {\n                  d3.csv(file).then(data => {\n                      this.setState({\n                        connections : data,\n                      }\n\n                      )\n                  });\n                };\n\n                \n                 formatRow = (row) =>{\n                  row.x = +row.x;\n                  row.y = +row.y;\n                  row.population = +row.population;\n                 }\n\n                 updateWordMapJson() {\n                  var jsonData = require(\"./WorldMapConnection/data/countries-10m.json\");\n                       this.setState({\n                        jsonData: jsonData,\n                        worldData : feature(jsonData,jsonData.objects.countries).features,\n                        });\n                  }\n\n                updateWordMap(){\n                    fetch(\n                      \"https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/countries-10m.json\"\n                    ).then(response => {\n                      if (response.status !== 200) {\n                        console.log(`There was a problem: ${response.status}`);\n                        return;\n                      }\n                      response.json().then(worldData => {\n                        this.setState({\n                          worldData: feature(worldData,worldData.objects.countries).features,\n                          jsonData : worldData\n                         });\n                       });\n                     });\n                  }\n                 updateCities() {\n                   this.setState({\n                     cities: this.getCities()\n                   });\n                 }\n                 getCities() {\n                   return [\n                     {\n                       name: \"Tokyo\",\n                       coordinates: [139.6917, 35.6895],\n                       population: 37843000\n                     },\n                     {\n                       name: \"Jakarta\",\n                       coordinates: [106.865, -6.1751],\n                       population: 30539000\n                     },\n                     {\n                       name: \"Delhi\",\n                       coordinates: [77.1025, 28.7041],\n                       population: 24998000\n                     },\n                     {\n                       name: \"Manila\",\n                       coordinates: [120.9842, 14.5995],\n                       population: 24123000\n                     },\n                     {\n                       name: \"Seoul\",\n                       coordinates: [126.978, 37.5665],\n                       population: 23480000\n                     },\n                     {\n                       name: \"Shanghai\",\n                       coordinates: [121.4737, 31.2304],\n                       population: 23416000\n                     },\n                     {\n                       name: \"Karachi\",\n                       coordinates: [67.0099, 24.8615],\n                       population: 22123000\n                     },\n                     {\n                       name: \"Beijing\",\n                       coordinates: [116.4074, 39.9042],\n                       population: 21009000\n                     },\n                     {\n                       name: \"New York\",\n                       coordinates: [-74.0059, 40.7128],\n                       population: 20630000\n                     },\n                     {\n                       name: \"Guangzhou\",\n                       coordinates: [113.2644, 23.1291],\n                       population: 20597000\n                     },\n                     {\n                       name: \"Sao Paulo\",\n                       coordinates: [-46.6333, -23.5505],\n                       population: 20365000\n                     },\n                     {\n                       name: \"Mexico City\",\n                       coordinates: [-99.1332, 19.4326],\n                       population: 20063000\n                     },\n                     {\n                       name: \"Mumbai\",\n                       coordinates: [72.8777, 19.076],\n                       population: 17712000\n                     },\n                     {\n                       name: \"Osaka\",\n                       coordinates: [135.5022, 34.6937],\n                       population: 17444000\n                     },\n                     {\n                       name: \"Moscow\",\n                       coordinates: [37.6173, 55.7558],\n                       population: 19170000\n                     },\n                     {\n                       name: \"Dhaka\",\n                       coordinates: [90.4125, 23.8103],\n                       population: 15669000\n                     },\n                     {\n                       name: \"Greater Cairo\",\n                       coordinates: [31.2357, 30.0444],\n                       population: 15600000\n                     },\n                     {\n                       name: \"Los Angeles\",\n                       coordinates: [-118.2437, 34.0522],\n                       population: 15058000\n                     },\n                     {\n                       name: \"Bangkok\",\n                       coordinates: [100.5018, 13.7563],\n                       population: 14998000\n                     },\n                     {\n                       name: \"Kolkata\",\n                       coordinates: [88.3639, 22.5726],\n                       population: 14667000\n                     },\n                     {\n                       name: \"Buenos Aires\",\n                       coordinates: [-58.3816, -34.6037],\n                       population: 14122000\n                     },\n                     {\n                       name: \"Tehran\",\n                       coordinates: [51.389, 35.6892],\n                       population: 13532000\n                     },\n                     {\n                       name: \"Istanbul\",\n                       coordinates: [28.9784, 41.0082],\n                       population: 13287000\n                     },\n                     {\n                       name: \"Lagos\",\n                       coordinates: [3.3792, 6.5244],\n                       population: 13123000\n                     },\n                     {\n                       name: \"Shenzhen\",\n                       coordinates: [114.0579, 22.5431],\n                       population: 12084000\n                     },\n                     {\n                       name: \"Rio de Janeiro\",\n                       coordinates: [-43.1729, -22.9068],\n                       population: 11727000\n                     },\n                     {\n                       name: \"Kinshasa\",\n                       coordinates: [15.2663, -4.4419],\n                       population: 11587000\n                     },\n                     {\n                       name: \"Tianjin\",\n                       coordinates: [117.3616, 39.3434],\n                       population: 10920000\n                     },\n                     {\n                       name: \"Paris\",\n                       coordinates: [2.3522, 48.8566],\n                       population: 10858000\n                     },\n                     {\n                       name: \"Lima\",\n                       coordinates: [-77.0428, -12.0464],\n                       population: 10750000\n                     }\n                   ];\n                 }\n\n                 handleFiles = files => {\n                   var reader = new FileReader();\n                   reader.onload = function() {\n                     // Use reader.result\n                     alert(reader.result);\n                   };\n                   reader.readAsText(files[0]);\n                 };\n                 onFileChange = e => {\n                   let files = e.target.files;\n                   let reader = new FileReader();\n                   reader.readAsDataURL(files[0]);\n                   reader.onload = e => {\n                     console.warn(e.target.result);\n                   };\n                 };\n\n               } ","import * as d3 from \"d3\";\r\nimport * as topojson from \"topojson-client\";\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nclass Test extends Component {\r\n    \r\n    render() { \r\n        let data = [{\r\n            \"source\": {\r\n                \"lat\": 40.712776,\r\n                \"lon\": -74.005974    \r\n            },\r\n            \"destination\": {\r\n                \"lat\": 21.05,\r\n                \"lon\": 105.55\r\n            }\r\n        },\r\n                 {\r\n            \"source\": {\r\n                \"lat\": 40.712776,\r\n                \"lon\": -74.005974    \r\n            },\r\n            \"destination\": {\r\n                \"lat\": -35.15,\r\n                \"lon\": 149.08\r\n            }\r\n        }]\r\n    \r\n    var curve = function(context) {\r\n      var custom = d3.curveLinear(context);\r\n      custom._context = context;\r\n      custom.point = function(x,y) {\r\n        var x = +x;\r\n        var y = +y;\r\n        switch (this._point) {\r\n          case 0: this._point = 1; \r\n            this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\r\n            this.x0 = x; this.y0 = y;        \r\n            break;\r\n          case 1: this._point = 2;\r\n          default: \r\n            var x1 = this.x0 * 0.5 + x * 0.5;\r\n            var y1 = this.y0 * 0.5 + y * 0.5;\r\n            var m = 1/(y1 - y)/(x1 - x);\r\n            var r = -100; // offset of mid point.\r\n            var k = r / Math.sqrt(1 + (m*m) );\r\n            if (m == Infinity) {\r\n              y1 += r;\r\n            }\r\n            else {\r\n              y1 += k;\r\n              x1 += m*k;\r\n            }     \r\n            this._context.quadraticCurveTo(x1,y1,x,y); \r\n            this.x0 = x; this.y0 = y;        \r\n            break;\r\n        }\r\n      }\r\n      return custom;\r\n    }\r\n    \r\n    var projection = d3.geoEquirectangular().translate([250,150]).scale(500/Math.PI/2);\r\n    var path = d3.geoPath(projection);\r\n    \r\n    var svg = d3.select(\"body\")\r\n      .append(\"svg\")\r\n      .attr(\"width\", 500)\r\n      .attr(\"height\", 300);\r\n      \r\n    d3.json(\"https://unpkg.com/world-atlas@1/world/110m.json\").then(function(world) {\r\n     \r\n      var worldOutline = svg.append(\"path\")\r\n        .datum(topojson.mesh(world))\r\n        .attr(\"d\", path );\r\n        \r\n      var line = d3.line()\r\n        .x(function(d) {\r\n          return projection([d.lon,d.lat])[0];\r\n        })\r\n        .y(function(d) {\r\n          return projection([d.lon,d.lat])[1];\r\n        })\r\n        .curve(curve);\r\n        \r\n      svg.selectAll(null)\r\n        .data(data)\r\n        .enter()\r\n        .append(\"path\")\r\n        .datum(function(d) {\r\n          return [d.source,d.destination]; // d3.line expects an array where each item represnts a vertex.\r\n        })\r\n        .attr(\"d\",line)\r\n        .attr(\"fill\",\"none\")\r\n        .style(\"stroke\",\"black\")\r\n        .style(\"stroke-width\",1.5);\r\n    \r\n    });\r\n        return ( \r\n            <div></div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Test;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}