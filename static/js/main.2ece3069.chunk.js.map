{"version":3,"sources":["MediaFrancais/data/medias_francais.tsv","MediaFrancais/data/relations_medias_francais.tsv","MediaFrancais/MediaFrancais.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MediaFrancais","props","width","height","scale","lastX","lastY","origin","x","y","viewBox","borderColor","initMarkersAndLinks","d3","remove","changeTheme","theme","setState","state","medias_francais","mediaFiltered","filter","d","showMarkersOnFirstOrder","raise","createWorldMap","relations_medias_francais","gGlobal","drawMediaPosition","drawCnx","addZoom","drawMap","node","worldData","isMapLoaded","g","append","attr","selectAll","data","enter","i","calculatePath","length","mergeMoroccoAndSahara","jsonData","selected","datum","merge","objects","countries","geometries","has","id","markers","media_francais_filtre","isNotEmpty","coordinate","projection","getChildCount","nom","getNodeColor","text","e","circleOnHover","media","childsCount","origine","relations","links","buildLinks","addLinks","forEach","link","value","getCoordinateByEntity","cible","lien","valeur","etat","validateLink","push","linkOrigineCoordinate","linkCibleCoordinate","entityName","entity","path","calculateLineString","style","colorPath","type","coordinates","svg","call","on","zoomed","transform","event","circleOnClick","console","log","bind","this","drawSvgWrapper","className","onChange","target","geoMercator","translate","precision","Component","App","readMediaFile","medias_francais_mock","then","response","readRelationFile","relations_medias_francais_mock","updateCitiesFromCsvFile","file","map","row","formatRow","name","population","cities","updateConnections","connections","handleFiles","files","reader","FileReader","onload","alert","result","readAsText","onFileChange","readAsDataURL","warn","updateWordMap","require","feature","features","fetch","status","json","getCities","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2ece3069.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/medias_francais.6491e171.tsv\";","module.exports = __webpack_public_path__ + \"static/media/relations_medias_francais.d49ff9ff.tsv\";","import * as d3 from \"d3\";\r\nimport React, { Component } from \"react\";\r\nimport { merge} from \"topojson-client\"\r\nimport \"./MediaFrancais.css\"\r\n\r\nexport default class MediaFrancais extends Component {\r\n                 //Constantes\r\n\r\n                 width = \"100%\";\r\n                 height = \"100%\";\r\n                 scale = 250;\r\n                 lastX = 0;\r\n                 lastY = 0;\r\n                 origin = {\r\n                   x: 55,\r\n                   y: -40\r\n                 };\r\n                 viewBox = \"0 0 800 450\";\r\n                 borderColor = \"red\";\r\n\r\n                 constructor(props) {\r\n                   super(props);\r\n                   this.state = {\r\n                     medias_francais: this.props.medias_francais,\r\n                     isMapLoaded: false\r\n                   };\r\n                   this.changeTheme = this.changeTheme.bind(this);\r\n                 }\r\n                 componentWillMount() {\r\n                   console.log(\"componentWillMount\");\r\n\r\n                   //Draw svg Wrapper\r\n                   var svg = this.drawSvgWrapper();\r\n                   var gGlobal = svg.append(\"g\").attr(\"id\", \"gWrapper\");\r\n                   //Draw Path from worldData\r\n                   var g = this.drawMap(gGlobal, this.props.worldData);\r\n                  //merge Morocco\r\n                   this.mergeMoroccoAndSahara(g, this.props.jsonData);\r\n                 }\r\n                 componentDidMount() {\r\n                   console.log(\"call the componentDidMount\");\r\n                 }\r\n\r\n                 componentDidUpdate() {\r\n                   console.log(\"call didComponentUpdate\");\r\n                 }\r\n                 render() {\r\n                   this.initMarkersAndLinks();\r\n                   console.log(\"call MediaFrancais render\");\r\n                   const medias_francais = this.state.medias_francais;\r\n                   const { worldData, relations_medias_francais } = this.props;\r\n                   if (worldData.length > 0) {\r\n                     this.createWorldMap(\r\n                       medias_francais,\r\n                       relations_medias_francais\r\n                     );\r\n                     this.showMarkersOnFirstOrder();\r\n                   }\r\n                   return (\r\n                     <div className=\"dropdown\">\r\n                       <select\r\n                         id=\"mySelect\"\r\n                         className=\"dropbtn\"\r\n                         onChange={e => {\r\n                           this.changeTheme(e.target.value);\r\n                         }}\r\n                       >\r\n                         <option value=\"0\">All theme</option>\r\n                         <option value=\"1\">Theme 1</option>\r\n                         <option value=\"2\">Theme 2</option>\r\n                         <option value=\"3\">Theme 3</option>\r\n                         <option value=\"4\">Theme 4</option>\r\n                       </select>\r\n                     </div>\r\n                   );\r\n                 }\r\n\r\n                 initMarkersAndLinks = () => {\r\n                   d3.selectAll(\".markers\").remove();\r\n                   d3.selectAll(\".paths\").remove();\r\n                 };\r\n                 changeTheme = theme => {\r\n                   if (theme == 0) {\r\n                     this.setState({\r\n                       ...this.state,\r\n                       medias_francais: this.props.medias_francais\r\n                     });\r\n                   } else {\r\n                     var mediaFiltered = this.props.medias_francais.filter(\r\n                       d => d.theme == theme\r\n                     );\r\n                     this.setState({\r\n                       ...this.state,\r\n                       medias_francais: mediaFiltered\r\n                     });\r\n                   }\r\n                 };\r\n\r\n                 showMarkersOnFirstOrder = () => {\r\n                   d3.select(\".markers\").raise();\r\n                 };\r\n                 //Create the world map\r\n                 createWorldMap = (\r\n                   medias_francais,\r\n                   relations_medias_francais\r\n                 ) => {\r\n                   var gGlobal = d3.select(\"#gWrapper\");\r\n                   //Draw Medias\r\n                   this.drawMediaPosition(gGlobal, medias_francais);\r\n                   //Draw connexions\r\n                   this.drawCnx(\r\n                     gGlobal,\r\n                     relations_medias_francais,\r\n                     medias_francais\r\n                   );\r\n                   //add zoom\r\n                   this.addZoom(gGlobal);\r\n                 };\r\n\r\n                 //Draw svg wrapper for map\r\n                 drawSvgWrapper() {\r\n                   //Construct Body\r\n                   var body = d3.select(\"body\");\r\n                   var divGlobal = body\r\n                     .append(\"div\")\r\n                     .attr(\"id\", \"map\")\r\n                     .attr(\"style\", \"border-style:dashed\");\r\n                   //Construct SVG\r\n                   var svg = divGlobal\r\n                     .append(\"svg\")\r\n                     .attr(\"id\", \"content\")\r\n                     .attr(\"width\", this.width)\r\n                     .attr(\"height\", this.height)\r\n                     .attr(\"viewBox\", this.viewBox)\r\n                     .attr(\r\n                       \"transform\",\r\n                       \"translate(\" +\r\n                         this.width / 2 +\r\n                         \",\" +\r\n                         this.height / 2 +\r\n                         \")\"\r\n                     );\r\n                   //Draw G for map\r\n                   return svg;\r\n                 }\r\n\r\n                 //Draw the world Map\r\n                 drawMap = (node, worldData) => {\r\n                   if (!this.state.isMapLoaded) {\r\n                     var g = node\r\n                       .append(\"g\")\r\n                       .attr(\"id\", \"worldMap\")\r\n                       .attr(\"className\", \"countries\");\r\n                     g.selectAll(\"path\")\r\n                       .data(worldData)\r\n                       .enter()\r\n                       .append(\"path\")\r\n                       .attr(\"key\", i => `path-${i}`)\r\n                       .attr(\"d\", d => this.calculatePath(d))\r\n                       .attr(\"className\", \"country\")\r\n                       //.attr(\"fill\", (d, i) => this.color(worldData, d, i))\r\n                       .attr(\"fill\", (d, i) => `rgba(38,50,56,${(1 / worldData.length) * i})`)\r\n                       .attr(\"stroke\", this.borderColor)\r\n                       .attr(\"stroke-width\", 0.05);\r\n                     return g;\r\n                   }\r\n                 };\r\n\r\n                 //Draw Map 2\r\n                 mergeMoroccoAndSahara = (g, jsonData) => {\r\n                   //Merge Morrocan sahara with morocco\r\n                   var selected = d3.set([732, 504]);\r\n                   g.append(\"path\")\r\n                     .datum(\r\n                       merge(\r\n                         jsonData,\r\n                         jsonData.objects.countries.geometries.filter(d => {\r\n                           return selected.has(d.id);\r\n                         })\r\n                       )\r\n                     )\r\n                     .attr(\"className\", \"country\")\r\n                     .attr(\"d\", d => this.calculatePath(d))\r\n                     .attr(\"stroke\", this.borderColor)\r\n                     .attr(\"stroke-width\", 0.05)\r\n                     .attr(\"fill\", \"gray\");\r\n                   return g;\r\n                 };\r\n\r\n                 //Add Markers Function\r\n                 drawMediaPosition = (node, medias_francais) => {\r\n                   const { relations_medias_francais } = this.props;\r\n                   var markers = node.append(\"g\").attr(\"class\", \"markers\");\r\n                   var media_francais_filtre = medias_francais.filter(\r\n                     d => this.isNotEmpty(d.x) && this.isNotEmpty(d.y)\r\n                   );\r\n                   markers\r\n                     .selectAll(\"circle\")\r\n                     .data(media_francais_filtre)\r\n                     .enter()\r\n                     .append(\"circle\")\r\n                     .attr(\"key\", d => `marker-${d.id}`)\r\n                     .attr(\"cx\", d => {\r\n                       var coordinate = [d.x, d.y];\r\n                       return this.projection()(coordinate)[0];\r\n                     })\r\n                     .attr(\"cy\", d => {\r\n                       var coordinate = [d.x, d.y];\r\n                       return this.projection()(coordinate)[1];\r\n                     })\r\n                     .attr(\"r\", d => {\r\n                       return this.getChildCount(\r\n                         d.nom,\r\n                         relations_medias_francais\r\n                       );\r\n                     })\r\n                     .attr(\"fill\", d => {\r\n                       return this.getNodeColor(\r\n                         d.id,\r\n                         relations_medias_francais\r\n                       );\r\n                     })\r\n                     .attr(\"stroke\", \"#FFFFFF\")\r\n                     .attr(\"class\", \"marker\")\r\n                     .append(\"title\")\r\n                     .text(e => this.circleOnHover(e));\r\n                   return markers;\r\n                 };\r\n\r\n                 //get node color\r\n                 getNodeColor = (id, media) => {\r\n                   var childsCount = media.filter(d => d.id === id).length;\r\n                   if (childsCount == 0) {\r\n                     return \"rgba(65, 131, 215, 1)\";\r\n                   } else {\r\n                     return \"rgba(214, 69, 65, 1)\";\r\n                   }\r\n                 };\r\n\r\n                 //get child\r\n                 getChildCount = (nom, media) => {\r\n                   var childsCount = media.filter(d => d.origine == nom).length;\r\n                   if (childsCount === 0) {\r\n                     return 0.8;\r\n                   }\r\n                   return childsCount;\r\n                 };\r\n\r\n                 drawCnx = (g, relations, media) => {\r\n                   //build links\r\n                   var links = this.buildLinks(relations, media);\r\n                   this.addLinks(g, links);\r\n                 };\r\n\r\n                 //build links [{},{}]\r\n                 buildLinks = (relations, media) => {\r\n                   var links = [];\r\n                   relations.forEach(d => {\r\n                     //var taille = ;\r\n                     var link = {\r\n                       origine: {\r\n                         value: d.origine,\r\n                         coordinate: this.getCoordinateByEntity(\r\n                           media,\r\n                           d.origine\r\n                         )\r\n                       },\r\n                       cible: {\r\n                         value: d.cible,\r\n                         coordinate: this.getCoordinateByEntity(media, d.cible)\r\n                       },\r\n                       lien: d.valeur,\r\n                       etat: d.etat\r\n                     };\r\n                     //add new link object\r\n                     if (this.validateLink(link)) {\r\n                       links.push(link);\r\n                     }\r\n                   });\r\n                   return links;\r\n                 };\r\n\r\n                 validateLink = link => {\r\n                   var linkOrigineCoordinate = link.origine.coordinate;\r\n                   var linkCibleCoordinate = link.cible.coordinate;\r\n                   if (\r\n                     linkOrigineCoordinate != null &&\r\n                     linkOrigineCoordinate.x != \"\" &&\r\n                     linkOrigineCoordinate.y != \"\" &&\r\n                     linkCibleCoordinate != null &&\r\n                     linkCibleCoordinate.x != \"\" &&\r\n                     linkCibleCoordinate.y != \"\"\r\n                   ) {\r\n                     return true;\r\n                   }\r\n                   return false;\r\n                 };\r\n\r\n                 getCoordinateByEntity = (media, entityName) => {\r\n                   var entity = media.filter(d => d.nom == entityName)[0];\r\n                   if (\r\n                     entity != null &&\r\n                     this.isNotEmpty(entity.x) &&\r\n                     this.isNotEmpty(entity.y)\r\n                   ) {\r\n                     return [entity.x, entity.y];\r\n                   }\r\n                 };\r\n\r\n                 //creation de connection entre deux pays\r\n                 addLinks = (node, links) => {\r\n                   var path = d3.geoPath().projection(this.projection());\r\n                   node\r\n                     .append(\"g\")\r\n                     .attr(\"class\", \"paths\")\r\n                     .selectAll(\"path\")\r\n                     .data(links)\r\n                     .enter()\r\n                     .append(\"path\")\r\n                     .attr(\"d\", d => path(this.calculateLineString(d)))\r\n                     .style(\"fill\", \"none\")\r\n                     .style(\"stroke\", d => this.colorPath(d))\r\n                     .style(\"stroke-width\", 0.5)\r\n                     .append(\"title\")\r\n                     .text(d => d.lien);\r\n                 };\r\n\r\n                 calculateLineString = link => {\r\n                   var coordinateEntityOrigine = link.origine.coordinate;\r\n                   var coordinateEntityCible = link.cible.coordinate;\r\n\r\n                   var linkAsLineString = {\r\n                     type: \"LineString\",\r\n                     coordinates: [\r\n                       coordinateEntityOrigine,\r\n                       coordinateEntityCible\r\n                     ]\r\n                   };\r\n                   return linkAsLineString;\r\n                 };\r\n\r\n                 colorPath = link => {\r\n                   switch (link.etat) {\r\n                     case \"P\":\r\n                       //Orange\r\n                       return \"rgba(242, 120, 75, 1)\";\r\n                     case \"N\":\r\n                       return \"rgba(231, 76, 60, 1)\";\r\n                     default:\r\n                       return \"rgba(65, 131, 215, 1)\";\r\n                   }\r\n                 };\r\n                 //Add zoom\r\n                 addZoom = svg => {\r\n                   svg.call(d3.zoom().on(\"zoom\", () => this.zoomed(svg)));\r\n                 };\r\n\r\n                 zoomed = svg => {\r\n                   var transform = d3.event.transform;\r\n\r\n                   svg.attr(\"transform\", transform);\r\n                 };\r\n                 //Events handlers\r\n                 circleOnHover = event => {\r\n                   return event.nom + \" [\" + event.x + \",\" + event.y + \"]\";\r\n                 };\r\n\r\n                 circleOnClick = event => {\r\n                   console.log(\"event\", event);\r\n                 };\r\n\r\n                 //Projection and path calculator\r\n                 projection() {\r\n                   var geoMercator = d3\r\n                     .geoMercator()\r\n                     .scale(150)\r\n                     .translate([800 / 2, 450 / 2]);\r\n\r\n                   var projection2 = d3\r\n                     .geoOrthographic()\r\n                     .scale(300)\r\n                     .precision(0.1);\r\n                   return geoMercator;\r\n                 }\r\n\r\n                 calculatePath = d => {\r\n                   return d3.geoPath().projection(this.projection())(d);\r\n                 };\r\n\r\n                 isNotEmpty = entity => {\r\n                   return entity != \"\" && entity != \"\" && entity != null;\r\n                 };\r\n               }\r\n","import React, { Component } from \"react\";\nimport { feature } from \"topojson-client\"\nimport * as d3 from \"d3\";\nimport medias_francais_mock from \"./MediaFrancais/data/medias_francais.tsv\";\nimport relations_medias_francais_mock from \"./MediaFrancais/data/relations_medias_francais.tsv\";\nimport MediaFrancais from \"./MediaFrancais/MediaFrancais\";\n\n\nexport default class App extends Component {\n  \n                 constructor(props) {\n                   super(props);\n                   this.state = {\n                     //media file\n                     medias_francais : [],\n                     //relation media\n                     relations_medias_francais : [],\n                     //Data for map creations\n                     worldData: [],\n                     jsonData :[],\n                     //Data for cities with most populations\n                     cities: [],\n                     //Link between cities\n                     connections : []\n                   };\n                 }\n\n                 componentDidMount() {\n                   this.readMediaFile();\n                   this.readRelationFile();\n                   //this.updateWordMapJson(); \n                   //Comment      \n                  this.updateWordMap();\n                  //this.updateCitiesFromCsvFile(capitalsPopulation);\n                  //this.updateConnections(connections);\n                }\n\n                 render() {\n                  const {worldData,jsonData,medias_francais,relations_medias_francais} = this.state;\n                  if(worldData.length !=0 && medias_francais.length !=0){\n                  return (\n\n                    <div>\n                      <MediaFrancais \n                          worldData = {worldData} \n                          medias_francais = {medias_francais} \n                          relations_medias_francais = {relations_medias_francais}\n                          jsonData={jsonData}\n                    ></MediaFrancais>\n                    </div>\n                  )}\n                  return (\n                    <div>\n                    </div>\n                  )\n                  \n                }\n                changeTheme = (theme)=>{\n                  var mediaFiltered = this.state.medias_francais.filter((d)=>d.theme==theme);\n                  console.log(\"mediaFiltered\",mediaFiltered);\n                  this.setState({\n                    medias_francais : mediaFiltered,\n                  })\n                  console.log(\"this.state.medias_francais\",this.state.medias_francais);\n                 }\n\n                readMediaFile = () =>{\n                 \n                  d3.tsv(medias_francais_mock).then(response =>{\n                    this.setState({\n                      medias_francais : response\n                    }\n                    )\n                  });\n                }\n\n                readRelationFile = () =>{\n                 \n                  d3.tsv(relations_medias_francais_mock).then(response =>{\n                    this.setState({\n                      relations_medias_francais : response\n                    })\n                  });\n                }\n\n\n                 updateCitiesFromCsvFile = file => {\n                   d3.csv(file).then(data => {\n                     data.map((row,i) => {\n                      this.formatRow(row);\n                       var coordinate = [row.x, row.y];\n                       data[i] = [row.name, coordinate, row.population];\n                     });\n                     this.setState({\n                       cities: data\n                     });\n                   });\n                 };\n\n                 updateConnections = file => {\n                  d3.csv(file).then(data => {\n                      this.setState({\n                        connections : data,\n                      }\n\n                      )\n                  });\n                };\n\n                \n                 formatRow = (row) =>{\n                  row.x = +row.x;\n                  row.y = +row.y;\n                  row.population = +row.population;\n                 }\n\n                 updateWordMapJson() {\n                  var jsonData = require(\"./WorldMapConnection/data/countries-10m.json\");\n                       this.setState({\n                        jsonData: jsonData,\n                        worldData : feature(jsonData,jsonData.objects.countries).features,\n                        });\n                  }\n\n                updateWordMap(){\n                    fetch(\n                      \"https://cdn.jsdelivr.net/npm/world-atlas@2.0.2/countries-10m.json\"\n                    ).then(response => {\n                      if (response.status !== 200) {\n                        console.log(`There was a problem: ${response.status}`);\n                        return;\n                      }\n                      response.json().then(worldData => {\n                        this.setState({\n                          worldData: feature(worldData,worldData.objects.countries).features,\n                          jsonData : worldData\n                         });\n                       });\n                     });\n                  }\n                 updateCities() {\n                   this.setState({\n                     cities: this.getCities()\n                   });\n                 }\n                 getCities() {\n                   return [\n                     {\n                       name: \"Tokyo\",\n                       coordinates: [139.6917, 35.6895],\n                       population: 37843000\n                     },\n                     {\n                       name: \"Jakarta\",\n                       coordinates: [106.865, -6.1751],\n                       population: 30539000\n                     },\n                     {\n                       name: \"Delhi\",\n                       coordinates: [77.1025, 28.7041],\n                       population: 24998000\n                     },\n                     {\n                       name: \"Manila\",\n                       coordinates: [120.9842, 14.5995],\n                       population: 24123000\n                     },\n                     {\n                       name: \"Seoul\",\n                       coordinates: [126.978, 37.5665],\n                       population: 23480000\n                     },\n                     {\n                       name: \"Shanghai\",\n                       coordinates: [121.4737, 31.2304],\n                       population: 23416000\n                     },\n                     {\n                       name: \"Karachi\",\n                       coordinates: [67.0099, 24.8615],\n                       population: 22123000\n                     },\n                     {\n                       name: \"Beijing\",\n                       coordinates: [116.4074, 39.9042],\n                       population: 21009000\n                     },\n                     {\n                       name: \"New York\",\n                       coordinates: [-74.0059, 40.7128],\n                       population: 20630000\n                     },\n                     {\n                       name: \"Guangzhou\",\n                       coordinates: [113.2644, 23.1291],\n                       population: 20597000\n                     },\n                     {\n                       name: \"Sao Paulo\",\n                       coordinates: [-46.6333, -23.5505],\n                       population: 20365000\n                     },\n                     {\n                       name: \"Mexico City\",\n                       coordinates: [-99.1332, 19.4326],\n                       population: 20063000\n                     },\n                     {\n                       name: \"Mumbai\",\n                       coordinates: [72.8777, 19.076],\n                       population: 17712000\n                     },\n                     {\n                       name: \"Osaka\",\n                       coordinates: [135.5022, 34.6937],\n                       population: 17444000\n                     },\n                     {\n                       name: \"Moscow\",\n                       coordinates: [37.6173, 55.7558],\n                       population: 19170000\n                     },\n                     {\n                       name: \"Dhaka\",\n                       coordinates: [90.4125, 23.8103],\n                       population: 15669000\n                     },\n                     {\n                       name: \"Greater Cairo\",\n                       coordinates: [31.2357, 30.0444],\n                       population: 15600000\n                     },\n                     {\n                       name: \"Los Angeles\",\n                       coordinates: [-118.2437, 34.0522],\n                       population: 15058000\n                     },\n                     {\n                       name: \"Bangkok\",\n                       coordinates: [100.5018, 13.7563],\n                       population: 14998000\n                     },\n                     {\n                       name: \"Kolkata\",\n                       coordinates: [88.3639, 22.5726],\n                       population: 14667000\n                     },\n                     {\n                       name: \"Buenos Aires\",\n                       coordinates: [-58.3816, -34.6037],\n                       population: 14122000\n                     },\n                     {\n                       name: \"Tehran\",\n                       coordinates: [51.389, 35.6892],\n                       population: 13532000\n                     },\n                     {\n                       name: \"Istanbul\",\n                       coordinates: [28.9784, 41.0082],\n                       population: 13287000\n                     },\n                     {\n                       name: \"Lagos\",\n                       coordinates: [3.3792, 6.5244],\n                       population: 13123000\n                     },\n                     {\n                       name: \"Shenzhen\",\n                       coordinates: [114.0579, 22.5431],\n                       population: 12084000\n                     },\n                     {\n                       name: \"Rio de Janeiro\",\n                       coordinates: [-43.1729, -22.9068],\n                       population: 11727000\n                     },\n                     {\n                       name: \"Kinshasa\",\n                       coordinates: [15.2663, -4.4419],\n                       population: 11587000\n                     },\n                     {\n                       name: \"Tianjin\",\n                       coordinates: [117.3616, 39.3434],\n                       population: 10920000\n                     },\n                     {\n                       name: \"Paris\",\n                       coordinates: [2.3522, 48.8566],\n                       population: 10858000\n                     },\n                     {\n                       name: \"Lima\",\n                       coordinates: [-77.0428, -12.0464],\n                       population: 10750000\n                     }\n                   ];\n                 }\n\n                 handleFiles = files => {\n                   var reader = new FileReader();\n                   reader.onload = function() {\n                     // Use reader.result\n                     alert(reader.result);\n                   };\n                   reader.readAsText(files[0]);\n                 };\n                 onFileChange = e => {\n                   let files = e.target.files;\n                   let reader = new FileReader();\n                   reader.readAsDataURL(files[0]);\n                   reader.onload = e => {\n                     console.warn(e.target.result);\n                   };\n                 };\n\n               } ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}